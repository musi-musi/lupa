const std = @import("std");
const w4 = @import("wasm4.zig");
const m = @import("math.zig");
const lvl = @import("level.zig");
const spr = @import("sprite.zig");

const Vf32 = m.Vf32;
const Vi32 = m.Vi32;
const Vu32 = m.Vu32;
const vf32 = m.vf32;
const vi32 = m.vi32;
const vu32 = m.vu32;

pub fn hexColor(comptime hex: []const u8) u32 {
    return comptime std.fmt.parseInt(u32, hex[1..], 16) catch {
        @compileError("invalid hex color code: " ++ hex);
    } ;
}

pub var cam_pos = m.Vi32.zero;

pub fn camOffset() m.Vi32 {
    return cam_pos.divFloorScalar(lvl.pixel_size).subScalar(w4.SCREEN_SIZE / 2).neg();
} 

pub fn lerpColor(a: u32, b: u32, t: f32) u32 {
    const ac = @bitCast([4]u8, a);
    const bc = @bitCast([4]u8, b);
    return @bitCast(u32, [4]u8 {
        m.lerp(ac[0], bc[0], t),
        m.lerp(ac[1], bc[1], t),
        m.lerp(ac[2], bc[2], t),
        m.lerp(ac[3], bc[3], t),
    });
}

pub const font = spr.Sprite {
    .width = 8,
    .height = 8,
    .frame_count = 69,
    .data = &[552]u8{ 0x00,0x40,0x40,0x40,0x40,0x40,0x00,0x40,0x00,0x50,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x50,0xf8,0x50,0xf8,0x50,0x00,0x00,0x20,0x78,0xa0,0x70,0x28,0xf0,0x20,0x00,0x00,0xc8,0xd0,0x20,0x58,0x98,0x00,0x00,0x40,0xa0,0xa0,0x50,0xa0,0x90,0x68,0x00,0x20,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x20,0x40,0x40,0x40,0x20,0x10,0x00,0x40,0x20,0x10,0x10,0x10,0x20,0x40,0x00,0x00,0x00,0x50,0x20,0x50,0x00,0x00,0x00,0x00,0x00,0x20,0x70,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x40,0x00,0x00,0x00,0x00,0x70,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x10,0x10,0x20,0x20,0x40,0x40,0x00,0x70,0x88,0x98,0xa8,0xc8,0x88,0x70,0x00,0x20,0x60,0x20,0x20,0x20,0x20,0x70,0x00,0x70,0x88,0x08,0x10,0x20,0x40,0xf8,0x00,0x70,0x88,0x08,0x30,0x08,0x88,0x70,0x00,0x88,0x88,0x88,0xf8,0x08,0x08,0x08,0x00,0xf8,0x80,0x80,0xf0,0x08,0x08,0xf0,0x00,0x70,0x88,0x80,0xf0,0x88,0x88,0x70,0x00,0xf8,0x08,0x10,0x10,0x20,0x20,0x40,0x00,0x70,0x88,0x88,0x70,0x88,0x88,0x70,0x00,0x70,0x88,0x88,0x78,0x08,0x88,0x70,0x00,0x00,0x20,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x20,0x40,0x00,0x00,0x10,0x20,0x40,0x20,0x10,0x00,0x00,0x00,0x00,0x70,0x00,0x70,0x00,0x00,0x00,0x00,0x40,0x20,0x10,0x20,0x40,0x00,0x00,0x70,0x88,0x88,0x10,0x20,0x00,0x20,0x00,0x00,0x70,0x88,0xa8,0x98,0x70,0x00,0x00,0x00,0x70,0x88,0xa8,0x98,0x70,0x00,0x00,0x70,0x40,0x40,0x40,0x40,0x40,0x70,0x00,0x00,0x40,0x40,0x20,0x20,0x10,0x10,0x00,0x70,0x10,0x10,0x10,0x10,0x10,0x70,0x00,0x00,0x20,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x70,0x00,0x40,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x70,0x08,0x78,0x88,0x78,0x00,0x80,0x80,0xf0,0x88,0x88,0x88,0xf0,0x00,0x00,0x00,0x70,0x88,0x80,0x88,0x70,0x00,0x08,0x08,0x78,0x88,0x88,0x88,0x78,0x00,0x00,0x00,0x70,0x88,0xf8,0x80,0x78,0x00,0x70,0x88,0xe0,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x78,0x88,0x78,0x08,0xf0,0x00,0x80,0x80,0xf0,0x88,0x88,0x88,0x88,0x00,0x20,0x00,0x60,0x20,0x20,0x20,0x70,0x00,0x10,0x00,0x30,0x10,0x10,0x90,0x60,0x00,0x80,0x80,0x88,0x90,0xe0,0x90,0x88,0x00,0x80,0x80,0x80,0x80,0x80,0x90,0x60,0x00,0x00,0x00,0xf0,0xa8,0xa8,0xa8,0xa8,0x00,0x00,0x00,0xf0,0x88,0x88,0x88,0x88,0x00,0x00,0x00,0x70,0x88,0x88,0x88,0x70,0x00,0x00,0x00,0xf0,0x88,0xf0,0x80,0x80,0x00,0x00,0x00,0x78,0x88,0x78,0x08,0x08,0x00,0x00,0x00,0xf0,0x88,0x80,0x80,0x80,0x00,0x00,0x00,0x78,0x80,0x70,0x08,0xf0,0x00,0x80,0x80,0xe0,0x80,0x80,0x90,0x60,0x00,0x00,0x00,0x88,0x88,0x88,0x88,0x78,0x00,0x00,0x00,0x88,0x88,0x88,0x50,0x20,0x00,0x00,0x00,0x88,0x88,0xa8,0xa8,0x50,0x00,0x00,0x00,0x88,0x50,0x20,0x50,0x88,0x00,0x00,0x00,0x88,0x88,0x78,0x08,0xf0,0x00,0x00,0x00,0xf8,0x10,0x20,0x40,0xf8,0x00,0x30,0x40,0x40,0xc0,0x40,0x40,0x30,0x00,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x00,0x60,0x10,0x10,0x18,0x10,0x10,0x60,0x00,0x00,0x00,0x40,0xa8,0x10,0x00,0x00 },
};

const char_width: i32 = 6;

pub fn drawText(pos: Vi32, text: []const u8) void {
    var i: u32 = 0;
    var x: i32 = pos.x;
    while (i < text.len) : (i += 1) {
        if (charFrame(text[i])) |f| {
            if (f >= 0) {
                font.draw(vi32(x, pos.y), f, 0);
            }
            x += char_width;
        }
    }
}

fn charFrame(c: u8) ?i32 {
    if (c >= 127) return null;
    if (c == ' ') return -1;
    if (c < ' ') return null;
    if (c < 'A') return @intCast(i32, c - '!');
    if (c <= 'Z') return charFrame(c + 0x20);
    return @intCast(i32, c - ' ' - 26);
}